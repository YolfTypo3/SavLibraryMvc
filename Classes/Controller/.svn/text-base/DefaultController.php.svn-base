<?php/****************************************************************  Copyright notice**  (c) 2010 Laurent Foulloy <yolf.typo3@orange.fr>*  All rights reserved**  This class is a backport of the corresponding class of FLOW3. *  All credits go to the v5 team.**  This script is part of the TYPO3 project. The TYPO3 project is*  free software; you can redistribute it and/or modify*  it under the terms of the GNU General Public License as published by*  the Free Software Foundation; either version 2 of the License, or*  (at your option) any later version.**  The GNU General Public License can be found at*  http://www.gnu.org/copyleft/gpl.html.**  This script is distributed in the hope that it will be useful,*  but WITHOUT ANY WARRANTY; without even the implied warranty of*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the*  GNU General Public License for more details.**  This copyright notice MUST APPEAR in all copies of the script!***************************************************************//** * Default controller for the SAV Library MVC * * @package SavLibraryMvc * @subpackage Controller * @author Laurent Foulloy <yolf.typo3@orange.fr> * @version $ID:$ */class Tx_SavLibraryMvc_Controller_DefaultController extends Tx_Extbase_MVC_Controller_ActionController {  // Constants for the mode  const DEFAULT_MODE = 0;  const EDIT_MODE = 1;  // Constants for the case where no information is available  const SHOW_A_MESSAGE = 0;  const DO_NOT_SHOW_A_MESSAGE = 1;  const HIDE_EXTENSION = 2;	/**	 * @var Tx_SavLibraryMvc_Parser_TemplateParser	 */  protected $templateParser;  	/**	 * @var Tx_SavLibraryMvc_Managers_GeneralManager	 */  protected $generalManager;  	/**  * Initializes the current action  *  * @return void  */  public function initializeAction() {    $this->templateParser = t3lib_div::makeInstance('Tx_SavLibraryMvc_Parser_TemplateParser');    $this->generalManager =  t3lib_div::makeInstance('Tx_SavLibraryMvc_Managers_GeneralManager', $this->request);    $this->initializeController();  }	/**  * Generates the list view configuration  *  * @return array The view configuration  */	public function getListViewConfiguration() {    // Sets the view type    $viewType = 'listView';        // Sets general configuration values    $this->generalManager->setGeneralConfigurationValue('extensionName', $this->generalManager->getExtensionName());    $this->generalManager->setGeneralConfigurationValue('controllerName', $this->generalManager->getControllerName());    $this->generalManager->setGeneralConfigurationValue('userIsAllowedToInputData', $this->generalManager->getFrontendUserManager()->isAllowedToInputData());    // Sets additional configuration values    $this->generalManager->setGeneralConfigurationValue('hideIconLeft', $this->generalManager->getSetting('noEditButton') && $this->generalManager->getSetting('noDeleteButton'));    $this->generalManager->setGeneralConfigurationValue('newButtonIsAllowed', $this->generalManager->getFrontendUserManager()->isAllowedToInputData() && !$this->generalManager->getSetting('noNewButton'));    // Gets the view identifier    $viewIdentifier = $this->getViewIdentifier($viewType);    $this->generalManager->setGeneralConfigurationValue('viewIdentifier', $viewIdentifier);    // Gets the item templates    $itemTemplate = $this->getViewItemTemplate($viewType);    // Searches the tags in the template    preg_match_all('/###([^\.#]+)\.?([^#]*)###/', $itemTemplate, $matches);    foreach ($matches[0] as $keyMatch => $match) {      if ($matches[2][$keyMatch]) {      } else {      // Main model is assumed      $fieldName = $matches[1][$keyMatch];      $itemTemplate = str_replace(        $match,        '<f:if condition="{field.cutDivItemInner}!=1">          <sav:render partial="Types/Default/' . $this->generalManager->getMainRepository()->getDataMapFactory()->getType($fieldName) . '.html' .            '" arguments="{configuration:configuration,field:configuration.fields.' . $fieldName . '}" />        </f:if>',        $itemTemplate      );      }    }    $titleParsed = false;        // Gets the number of items to display    $count = $this->generalManager      ->getMainRepository()      ->countAll();    // Processes the case where the count is equal to zero    if($count == 0) {      switch($this->generalManager->getSetting('showNoAvailableInformation')) {        case self::SHOW_A_MESSAGE:          $this->generalManager->setGeneralConfigurationValue('message', Tx_Extbase_Utility_Localization::translate('message.noAvailableInformation', 'sav_library_mvc'));          break;        case self::DO_NOT_SHOW_A_MESSAGE:          break;        case self::HIDE_EXTENSION:          $this->generalManager->setGeneralConfigurationValue('hideExtension', true);          break;      }      $viewConfiguration = array(        'general' => $this->generalManager->getGeneralConfiguration(),      );      return $viewConfiguration;    }        // Gets the data from the main repository    $objects = $this->generalManager      ->getMainRepository()      ->findAllForListView();    foreach ($objects as $object) {      // Gets the fields configuration      $fieldsConfiguration = $this->generalManager->getMainRepository()->getDataMapFactory()->getFieldsConfiguration($viewIdentifier, $object);	    // Adds the general uid for processing draft workspace record      $this->generalManager->setGeneralConfigurationValue('guid', $this->generalManager->getMainRepository()->getGuid($object->getUid()));      $uncompressParameters = $this->generalManager->uncompressParameters($this->generalManager->getGeneralConfigurationValue('special'));      $uncompressParameters['realUid'] = $object->getUid();      $this->generalManager->setGeneralConfigurationValue('special', $this->generalManager->compressParameters($uncompressParameters));      // Sets additional configuration values      $isInDraftWorkspace = $this->generalManager->getMainRepository()->isInDraftWorkspace($object->getUid());      $editButtonIsAllowed = $this->generalManager->getFrontendUserManager()->isAllowedToInputData() &&        !$this->generalManager->getSetting('noEditButton') &&        !$isInDraftWorkspace;      $deleteButtonIsAllowed = $this->generalManager->getFrontendUserManager()->isAllowedToInputData() &&        !$this->generalManager->getSetting('noDeleteButton') &&        !$isInDraftWorkspace;      // Sets the configuration      $configuration = array(        'general' => $this->generalManager->getGeneralConfiguration(),        'fields' => $fieldsConfiguration,        'data' => $object,      );      // Parses the title      if (!$titleParsed) {        $title = $this->parseTitle($viewType, array('general' => $this->generalManager->getGeneralConfiguration(),'fields' => $fieldsConfiguration));        $titleParsed = true;      }      $itemsConfiguration[] = array(        'template' => $this->templateParser->parseTemplate($itemTemplate, array('configuration' => $configuration)),        'data' => $object,        'configuration' => array(          'isInDraftWorkspace' => $isInDraftWorkspace,          'editButtonIsAllowed' => $editButtonIsAllowed,          'deleteButtonIsAllowed' => $deleteButtonIsAllowed,        ),      );    }    $this->generalManager->setGeneralConfigurationValue('title', $title);    $viewConfiguration = array(      'general' => $this->generalManager->getGeneralConfiguration(),      'fields' => $itemsConfiguration,    );    return $viewConfiguration;  }	/**  * Generates the single view configuration  *  * @param integer uid The record uid  * @return array The view configuration  */	public function getSingleViewConfiguration($uid) {    // Sets the view type    $viewType = 'singleView';    // Sets general configuration values    $this->generalManager->setGeneralConfigurationValue('extensionName', $this->generalManager->getExtensionName());    $this->generalManager->setGeneralConfigurationValue('controllerName', $this->generalManager->getControllerName());    $userIsAllowedToInputData = $this->generalManager->getFrontendUserManager()->isAllowedToInputData() &&      !$this->generalManager->getMainRepository()->isInDraftWorkspace($uid);    $this->generalManager->setGeneralConfigurationValue('userIsAllowedToInputData', $userIsAllowedToInputData);    $this->generalManager->setGeneralConfigurationValue('isInDraftWorkspace', $this->generalManager->getMainRepository()->isInDraftWorkspace($uid));	  // Adds the general uid for processing draft workspace record    $this->generalManager->setGeneralConfigurationValue('guid', $this->generalManager->getMainRepository()->getGuid($uid));    // Gets the view identifier    $viewIdentifier = $this->getViewIdentifier($viewType);    $this->generalManager->setGeneralConfigurationValue('viewIdentifier', $viewIdentifier);    // Gets the object from the uid    $object = $this->generalManager      ->getMainRepository()      ->findByUid($uid);        // Gets the fields configuration    $fieldsConfiguration = $this->generalManager->getMainRepository()->getDataMapFactory()->getFieldsConfiguration($viewIdentifier, $object);    // Parses the title    $title = $this->parseTitle($viewType, array('general' => $this->generalManager->getGeneralConfiguration(),'fields' => $fieldsConfiguration));    $this->generalManager->setGeneralConfigurationValue('title', $title);    // Gets the folders    $viewFolders = $this->getViewFolders($viewType);    // Sets the view configuration    $viewConfiguration = array (      'general' => $this->generalManager->getGeneralConfiguration(),      'fields' => $fieldsConfiguration,      'data' => $object,      'folders' => $viewFolders,    );    return $viewConfiguration;  }	/**  * Generates the edit view configuration  *  * @param integer uid The record uid  * @return array The view configuration  */	public function getEditViewConfiguration($uid = 0) {    // Sets the view type    $viewType = 'editView';    // Sets general configuration values    $this->generalManager->setGeneralConfigurationValue('extensionName', $this->generalManager->getExtensionName());    $this->generalManager->setGeneralConfigurationValue('controllerName', $this->generalManager->getControllerName());    $this->generalManager->setGeneralConfigurationValue('userIsAllowedToInputData', $this->generalManager->getFrontendUserManager()->isAllowedToInputData());    // Adds the new and save button    $savLibraryMvcCtrl = $this->generalManager->getMainRepository()->getDataMapFactory()->getSavLibraryMvcCtrl();    $this->generalManager->setGeneralConfigurationValue('saveAndNew', $savLibraryMvcCtrl['saveAndNew']);        // Gets the view identifier    $viewIdentifier = $this->getViewIdentifier($viewType);    $this->generalManager->setGeneralConfigurationValue('viewIdentifier', $viewIdentifier);    // Gets the object from the uid if it exists or creates a new one    if($uid){      $object = $this->generalManager        ->getMainRepository()        ->findByUid($uid);    } else {      $object = $this->generalManager        ->getMainRepository()        ->createModelObject();      $this->generalManager->setGeneralConfigurationValue('newRecord', 1);    }    // Gets the fields configuration    $fieldsConfiguration = $this->generalManager->getMainRepository()->getDataMapFactory()->getFieldsConfiguration($viewIdentifier, $object);    // Parses the title    $title = $this->parseTitle($viewType, array('general' => $this->generalManager->getGeneralConfiguration(),'fields' => $fieldsConfiguration));    $this->generalManager->setGeneralConfigurationValue('title', $title);    // Gets the folders    $viewFolders = $this->getViewFolders($viewType);    // Sets the view configuration    $viewConfiguration = array (      'general' => $this->generalManager->getGeneralConfiguration(),      'fields' => $fieldsConfiguration,      'data' => $object,      'folders' => $viewFolders,    );    return $viewConfiguration;  }	/**  * Generates the edit view configuration  *  * @param string $viewType The view type  * @return array The folder configuration  */  protected function getViewFolders($viewType) {    $viewFolders = $this->getFolders($viewType);    // Sets the folder key    $special = $this->generalManager->getGeneralConfigurationValue('special');    $uncompressedParameters = $this->generalManager->uncompressParameters($special);    if($uncompressedParameters['folder']) {      $activeFolder = (empty($viewFolders) ? 0 : $uncompressedParameters['folder']);    } else {      $activeFolder = (empty($viewFolders) ? 0 : key($viewFolders));    }    $this->generalManager->setGeneralConfigurationValue('activeFolder', $activeFolder);    return $viewFolders;  }  	/**	 * Checks for uploaded files.	 *	 * @param string $objectName The object name	 * @param int $viewIdentifier The view identifier	 *	 * @return array The uploaded files	 */  protected function checkForUploadedFiles($objectName, $viewIdentifier) {    $uploadedFields = [];        // Gets the file array    $variableName = strtolower('tx_' . $this->generalManager->getExtensionName() . '_' .$this->generalManager->getPluginName());    $files = $GLOBALS['_FILES'][$variableName];    // Processes the file array    foreach($files['name'][$objectName] as $keyField => $field) {          // Gets the field configuration      $fieldConfiguration = $this->generalManager->getMainRepository()->getDataMapFactory()->getMergedFieldConfigurationByView($keyField, $viewIdentifier);      // If upload folder does not exist, creates it      $uploadFolder = $fieldConfiguration['uploadfolder'];      $uploadFolder .= ($fieldConfiguration['addToUploadFolder'] ? '/' . $fieldConfiguration['addToUploadFolder'] : '');      $error = t3lib_div::mkdir_deep(PATH_site, $uploadFolder);      if ($error) {        $this->flashMessages->add(Tx_Extbase_Utility_Localization::translate('error.cannotCreateDirectoryInUpload', 'sav_library_mvc'));        return;      }      foreach($field as $keyFileName => $fileName) {        // Skips the file if there is no file name        if (empty($fileName)) {          continue;        }              // Checks the size        if ($files['size'][$objectName][$keyField][$keyFileName] > $fieldConfiguration['max_size'] * 1024) {          $this->flashMessages->add(Tx_Extbase_Utility_Localization::translate('error.maxFileSizeExceededInUpload', 'sav_library_mvc'));          return;        }              // Checks the extension        $path_parts = pathinfo($files['name'][$objectName][$keyField][$keyFileName]);        if ($fieldConfiguration['allowed'] && in_array($path_parts['extension'], explode(',', $fieldConfiguration['allowed'])) === false) {          $this->flashMessages->add(Tx_Extbase_Utility_Localization::translate('error.forbiddenFileTypeInUpload', 'sav_library_mvc'));          return;        }        if (empty($fieldConfiguration['allowed']) && in_array($path_parts['extension'], explode(',', $fieldConfiguration['disallowed'])) === true) {          $this->flashMessages->add(Tx_Extbase_Utility_Localization::translate('error.forbiddenFileTypeInUpload', 'sav_library_mvc'));          return;        }        // Uploads the file    		if (move_uploaded_file($files['tmp_name'][$objectName][$keyField][$keyFileName], $uploadFolder . '/' . $files['name'][$objectName][$keyField][$keyFileName]) === false) {          $this->flashMessages->add(Tx_Extbase_Utility_Localization::translate('error.uploadAborted', 'sav_library_mvc'));    		}    		$uploadedFields[$keyField][$keyFileName] = $files['name'][$objectName][$keyField][$keyFileName];  		}    }    return $uploadedFields;  }  	/**	 * Replaces the localisation markers and parses the template	 *	 * @param string $viewType The type of the view	 * @param array $configuration The configuration used for replacements	 *	 * @return string The parsed title	 */  protected function parseTitle($viewType, $configuration) {    // Gets and processes the title    $title = $this->getViewTitleBar($viewType);    // Checks if the title contains html tags    if (preg_match('/<[^>]+>/', $title)) {      $this->generalManager->setGeneralConfigurationValue('titleNeedsFormat', 1);    }    // Processes the localization markers    $title = $this->generalManager      ->getMainRepository()      ->getDataMapFactory()      ->getFieldConfigurationManager()      ->processLocalizationTags($title);    // Processes the markers    preg_match_all('/###(\w+)###/', $title, $matches);    foreach ($matches[0] as $keyMatch => $match) {      $fieldName = $matches[1][$keyMatch];      switch($viewType) {        case 'listView':          if ($configuration['fields'][$fieldName]['orderLinkInTitle']) {            // Gets the associated whereTags            $configuration['fields'][$fieldName]['orderAsc'] = $this->generalManager->getMainRepository()->getWhereTagByTitle($fieldName . '+');            $configuration['fields'][$fieldName]['orderDesc'] = $this->generalManager->getMainRepository()->getWhereTagByTitle($fieldName . '-');            // Sets the default pattern for the display            if(!isset($configuration['fields'][$fieldName]['orderLinkInTitleSetup'])) {              $configuration['fields'][$fieldName]['orderLinkInTitleSetup'] = ':link:';            }            $replacementString = '<sav:render partial="TitleBars/OrderLinks/renderField.html" arguments="{field:configuration.fields.' . $fieldName . ',configuration:configuration}" />';          } else {            $replacementString = '{configuration.fields.' . $fieldName . '.label}';          }          break;         default:          $replacementString = '{configuration.fields.' . $fieldName . '.value}';      }      $title = str_replace($match, $replacementString, $title);    }    // Parses the title template    $title = $this->templateParser->parseTemplate($title, array('configuration' => $configuration));    return $title;  }  	/**	 * Prepares a view for the current action and stores it in $this->view.	 * By default, this method tries to locate a view with a name matching	 * the current action.	 *	 * @return void	 */	protected function resolveView() {    // Creates the view		$view = $this->objectManager->getObject('Tx_Fluid_View_TemplateView');		$controllerContext = $this->buildControllerContext();    // Changes the controller context    $controllerContext->getRequest()->setControllerExtensionName('SavLibraryMvc');    $controllerContext->getRequest()->setControllerName('Default');		$view->setControllerContext($controllerContext);    $this->templateParser->setControllerContext($controllerContext);    $this->generalManager->setFlashMessageContainer($controllerContext->getFlashMessageContainer());		// Template Path Override		$extbaseFrameworkConfiguration = Tx_Extbase_Dispatcher::getExtbaseFrameworkConfiguration();		if (isset($extbaseFrameworkConfiguration['view']['templateRootPath']) && strlen($extbaseFrameworkConfiguration['view']['templateRootPath']) > 0) {			$view->setTemplateRootPath(t3lib_div::getFileAbsFileName($extbaseFrameworkConfiguration['view']['templateRootPath']));		}		if (isset($extbaseFrameworkConfiguration['view']['layoutRootPath']) && strlen($extbaseFrameworkConfiguration['view']['layoutRootPath']) > 0) {			$view->setLayoutRootPath(t3lib_div::getFileAbsFileName($extbaseFrameworkConfiguration['view']['layoutRootPath']));		}		if (isset($extbaseFrameworkConfiguration['view']['partialRootPath']) && strlen($extbaseFrameworkConfiguration['view']['partialRootPath']) > 0) {			$view->setPartialRootPath(t3lib_div::getFileAbsFileName($extbaseFrameworkConfiguration['view']['partialRootPath']));		}		if ($view->hasTemplate() === false) {			$viewObjectName = $this->resolveViewObjectName();			if (class_exists($viewObjectName) === false) $viewObjectName = 'Tx_Extbase_MVC_View_EmptyView';			$view = $this->objectManager->getObject($viewObjectName);			$view->setControllerContext($controllerContext);		}		if (method_exists($view, 'injectSettings')) {			$view->injectSettings($this->settings);		}		$view->initializeView(); // In FLOW3, solved through Object Lifecycle methods, we need to call it explicitely		$view->assign('settings', $this->settings); // same with settings injection.		return $view;	}  }?>