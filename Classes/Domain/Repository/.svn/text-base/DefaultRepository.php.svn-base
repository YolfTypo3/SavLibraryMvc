<?php

/***************************************************************
*  Copyright notice
*
*  (c) 2009 Laurent Foulloy <yolf.typo3@orange.fr>
*  All rights reserved
*
*  This script is part of the TYPO3 project. The TYPO3 project is
*  free software; you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation; either version 2 of the License, or
*  (at your option) any later version.
*
*  The GNU General Public License can be found at
*  http://www.gnu.org/copyleft/gpl.html.
*
*  This script is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  This copyright notice MUST APPEAR in all copies of the script!
***************************************************************/

/**
 * Default Repository for the SAV Library MVC Extension Generator
 *
 * @package SavLibraryMvc
 * @subpackage Domain/Repository
 * @author Laurent Foulloy <yolf.typo3@orange.fr>
 */
class Tx_SavLibraryMvc_Domain_Repository_DefaultRepository extends Tx_Extbase_Persistence_Repository {

	/**
	 * @var Tx_SavLibraryMvc_Managers_GeneralManager
	 */
   protected $generalManager;

	/**
	 * @var Tx_SavLibraryMvc_Persistence_Mapper_DataMapFactory
	 */
   protected $dataMapFactory;
   
	/**
	 * @var array
	 */
   private $row = NULL;
   
   
	/**
	 * Constructor.
	 */
	public function __construct() {
    parent::__construct();
    $this->dataMapFactory = t3lib_div::makeInstance('Tx_SavLibraryMvc_Persistence_Mapper_DataMapFactory', $this->objectType);
  }

	/**
	 * Sets the general manager.
	 *
	 * @param Tx_SavLibraryMvc_Managers_GeneralManager $generalManager The manager
	 * return none
	 */
   public function setGeneralManager($generalManager) {
    $this->generalManager = $generalManager;
    $this->dataMapFactory->SetGeneralManager($generalManager);
  }

	/**
	 * Adds a constraint.
	 *
	 * @param Tx_Extbase_Persistence_Query $query
	 * @param Tx_Extbase_Persistence_QOM_ConstraintInterface $constraint
	 * return none
	 */
  public function setConstraint($query, $constraint) {
    if ($query->getConstraint() === NULL) {
      $query->matching($constraint);
    } else {
      $query->matching($query->logicalAnd($query->getConstraint(), $constraint));
    }
  }
    

	/**
	 * Gets the data map factory
	 *
	 * @return Tx_SavLibraryMvc_Persistence_Mapper_DataMapFactory The data map factory
	 */
	public function getDataMapFactory() {
		return $this->dataMapFactory;
	}

	/**
	 * Returns all objects of this repository
	 *
	 * @return array An array of objects, empty if no objects found
	 */
	public function findAllForListView() {
    $limit = (int)(
      $this->generalManager->getSetting('maxItems') ?
      $this->generalManager->getSetting('maxItems') :
      $this->countAll()
    );

    $offset = (int) $this->generalManager->getGeneralConfigurationValue('currentPage') * $limit;
    
    // Creates the query
    $query = $this->createQuery();

    // Sets the storage page
    $this->setStoragePageConstraint($query);

    // Sets the versioning constraint
    $this->setVersioningConstraint($query);

    // Applies the where clause
    $this->whereClause($query);
    
    // Applies the order by clause
    $special = $this->generalManager->getGeneralConfigurationValue('special');
    $uncompressedParameters = $this->generalManager->uncompressParameters($special);
    // Checks if there is an order link
    if (isset($uncompressedParameters['orderLink'])) {
      $orderByMethod = 'orderByClauseForWhereTag' . $uncompressedParameters['orderLink'];
      if (method_exists($this, $orderByMethod)) {
         // Applies the where tag ordering
        $this->$orderByMethod($query);
      } else {
        // Applies the default ordering
        $this->orderByClause($query);
      }
    } else {
      // Applies the default ordering
      $this->orderByClause($query);
    }

    // Changes the settings : storage page is processed at the kickstarter level
    $query->getQuerySettings()->setRespectStoragePage(FALSE);

    // Gets the result
    $result = $query
      ->setOffset($offset)
      ->setLimit($limit ? $limit : 1)
      ->execute();

		return $result;
	}

	/**
	 * Finds an object matching the given identifier.
	 *
	 * @param int $uid The identifier of the object to find
	 * @return object The matching object if found, otherwise NULL
	 * @api
	 */
	public function findByUid($uid) {
		if ($this->identityMap->hasIdentifier($uid, $this->objectType)) {
			$object = $this->identityMap->getObjectByIdentifier($uid, $this->objectType);
		} else {
			$query = $this->createQuery();
			$query->getQuerySettings()->setRespectSysLanguage(FALSE);
      $query->getQuerySettings()->setRespectStoragePage(FALSE);
			$result = $query->matching($query->equals('uid', $uid))->execute();
			$object = NULL;
			if (count($result) > 0) {
				$object = current($result);
				$this->identityMap->registerObject($object, $uid);
			}
		}
		return $object;
	}

	/**
	 * Returns the count of all objects of this repository
	 *
	 * @return integer The count of objects
	 */
	public function countAll() {
    // Creates the query
    $query = $this->createQuery();
    
    // Sets the storage page
    $this->setStoragePageConstraint($query);

    // Sets the versioning constraint
    $this->setVersioningConstraint($query);
    
    // Applies the where clause
    $this->whereClause($query);
    
    // Gets the result
    $result = $query
      ->count();

		return $result;
	}

	/**
	 * Gets the raw query result searched by uid
	 *
	 * @param integer uid
	 * @return void
	 */
	public function getRowByUid($uid) {
    // Creates the query
    $query = $this->createQuery();

		$query->getQuerySettings()
      ->setRespectSysLanguage(FALSE)
      ->setRespectStoragePage(FALSE)
      ->setReturnRawQueryResult(TRUE);
		$result = $query->matching($query->equals('uid', $uid))->execute();

		$this->row = $result[0];
	}

	/**
	 * Returns true if the record with the given uid is in the draft workspace
	 *
	 * @param integer uid The uid of the record
	 * @return boolean
	 */
  public function isInDraftWorkspace($uid) {
    if ($this->row['uid'] != $uid) {
      $this->getRowByUid($uid);
    }
    return ($this->generalManager->isInPreviewMode() &&
      $this->getPid() == -1
    );
  }

	/**
	 * Returns a "general" uid taht is either the uid of the record if it is in the live workspace
	 * or the t3vers_oid if it is in the draft workspace
	 *
	 * @param integer uid The uid of the record
	 * @return integer
	 */
  public function getGuid($uid) {
    if ($this->row['uid'] != $uid) {
      $this->getRowByUid($uid);
    }
    return ($this->isInDraftWorkspace($uid) ? $this->getT3verOid() : $uid);
  }

	/**
	 * Returns the pid field of a row
	 *
	 * @return integer
	 */
	public function getPid() {
    return $this->row['pid'];
	}

	/**
	 * Returns the t3ver_oid field of a row
	 *
	 * @return integer
	 */
	public function getT3verOid() {
    return $this->row['t3ver_oid'];
	}

	/**
	 * Sets the storage page
	 *
	 * @param Tx_Extbase_Persistence_Query $query
	 * @return void
	 */
	protected function setStoragePageConstraint($query) {
    // Changes the settings
    $query->getQuerySettings()->setRespectStoragePage(FALSE);

    if ($this->generalManager->isInPreviewMode()) {
      $this->setConstraint($query,
        $query->in('pid', array(-1,$this->generalManager->getStoragePage()))
      );
    } else {
      $this->setConstraint($query,
        $query->in('pid', array($this->generalManager->getStoragePage()))
      );
    }
  }

	/**
	 * Sets the versioning constraint
	 *
	 * @param Tx_Extbase_Persistence_Query $query
	 * @return void
	 */
	protected function setVersioningConstraint($query) {
    if ($this->generalManager->isInPreviewMode()) {
      $this->setConstraint($query,
        $query->logicalAnd(
          $query->lessThan('t3ver_state', 1),
          $query->in('t3ver_wsid', array(0, $this->generalManager->getVersioningWorkspaceId()))
        )
      );

    }
  }

}
?>
