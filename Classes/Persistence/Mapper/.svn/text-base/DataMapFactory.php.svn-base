<?php
/***************************************************************
 *  Copyright notice
 *
 *  (c) 2009 Jochen Rau <jochen.rau@typoplanet.de>
 *  All rights reserved
 *
 *  This script is part of the TYPO3 project. The TYPO3 project is
 *  free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  The GNU General Public License can be found at
 *  http://www.gnu.org/copyleft/gpl.html.
 *
 *  This script is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  This copyright notice MUST APPEAR in all copies of the script!
 ***************************************************************/

/**
 * Extends Tx_Extbase_Persistence_Mapper_DataMapFactory.
 *
 * @package SavLibraryMvc
 * @subpackage Persistence\Mapper
 * @version $ID:$
 */
class  Tx_SavLibraryMvc_Persistence_Mapper_DataMapFactory extends Tx_Extbase_Persistence_Mapper_DataMapFactory {

	/**
	 * @var Tx_SavLibraryMvc_Managers_GeneralManager
	 */
   protected $generalManager;

  /**
   * @var Tx_Extbase_Persistence_Mapper_DataMap
   **/
  protected $dataMap;
  
	/**
	 * @var array
	 */
   protected $controlSection;

	/**
	 * @var array
	 */
   protected $columnsDefinition;

	/**
	 * @var array
	 */
   protected $savLibraryMvcConfiguration;

	/**
	 * @var boolean
	 */
   protected $fusionFlag = false;

	/**
	 * @var Tx_SavLibraryMvc_Managers_FieldConfigurationManager
	 */
   protected $fieldConfigurationManager;

	/**
	 * Constructor.
	 */
	public function __construct($objectType) {
		$persistenceManager = Tx_Extbase_Dispatcher::getPersistenceManager();
		$this->dataMap = $persistenceManager->getBackend()->getDataMapper()->getDataMap($objectType);
    $this->controlSection = $this->getControlSection($this->dataMap->getTableName());
    $this->columnsDefinition = $this->getColumnsDefinition($this->dataMap->getTableName());
    $this->setSavLibraryMvcConfiguration();
    $this->fieldConfigurationManager = t3lib_div::makeInstance('Tx_SavLibraryMvc_Managers_FieldConfigurationManager', $this->dataMap->getTableName());
  }

	/**
	 * Sets the manager.
	 *
	 * @param Tx_SavLibraryMvc_Managers_GeneralManager $generalManager The manager
	 * return none
	 */
   public function setGeneralManager($generalManager) {
    $this->generalManager = $generalManager;
    $this->fieldConfigurationManager->SetGeneralManager($generalManager);
  }

	/**
	 * Gets the fieldConfigurationManager.
	 *
	 * @return Tx_SavLibraryMvc_Managers_FieldConfigurationManager
	 */
	public function getFieldConfigurationManager() {
    return $this->fieldConfigurationManager;
	}

	/**
	 * Sets the savLibraryMvcColumns.
	 *
	 * @return void
	 */
	public function setSavLibraryMvcConfiguration() {
    $this->savLibraryMvcConfiguration = is_array($this->controlSection['EXT']['sav_library_mvc']) ? $this->controlSection['EXT']['sav_library_mvc'] : [];
	}

	/**
	 * Gets the savLibraryMvcColumns.
	 *
	 * @return array
	 */
	public function getSavLibraryMvcColumns() {
    return is_array($this->savLibraryMvcConfiguration['columns']) ? $this->savLibraryMvcConfiguration['columns'] : [];
	}
	
	/**
	 * Gets the savLibraryMvcCtrl.
	 *
	 * @return array
	 */
	public function getSavLibraryMvcCtrl() {
    return is_array($this->savLibraryMvcConfiguration['ctrl']) ? $this->savLibraryMvcConfiguration['ctrl'] : [];
	}

	
	/**
	 * Gets the TCAFieldConfiguration.
	 *
	 * @param string $fieldName
	 * @return array
	 */
	public function getTCAFieldConfiguration($fieldName) {
    return is_array($this->columnsDefinition[$fieldName]['config']) ? $this->columnsDefinition[$fieldName]['config'] : [];
	}

	/**
	 * Gets the TCAFieldLabel.
	 *
	 * @param string $fieldName
	 * @return string
	 */
	public function getTCAFieldLabel($fieldName) {
		return $GLOBALS['TSFE']->sl($this->columnsDefinition[$fieldName]['label']);
	}
	
	/**
	 * Gets the LabelField.
	 *
	 * @return string
	 */
	public function getLabelField() {
		return $this->controlSection['label'];
	}

	/**
	 * Gets the type of the field.
	 *
	 * @param string $fieldName
	 * @return string
	 */
	public function getType($fieldName) {
    $savLibraryMvcColumns = $this->getSavLibraryMvcColumns();
		return $savLibraryMvcColumns[$fieldName]['type'];
	}

	/**
	 * Gets the folder for the view.
	 *
	 * @param string $fieldName
	 * @param integer $viewIdentifier
	 * @return integer
	 */
	public function getFolder($fieldName, $viewIdentifier) {
    $savLibraryMvcColumns = $this->getSavLibraryMvcColumns();
    $folder = $savLibraryMvcColumns[$fieldName]['folders'][$viewIdentifier];
		return ($folder ? $folder : 0);
	}

	/**
	 * Gets the SavLibraryMvc field configuration.
	 *
	 * @param string $fieldName
	 * @return array
	 */
	public function getSavLibraryMvcFieldConfiguration($fieldName) {
    return $this->savLibraryMvcColumns[$fieldName];
  }

	/**
	 * Gets the SavLibraryMvc field configuration by view.
	 *
	 * @param string $fieldName
	 * @param integer $viewIdentifier
	 * @return array
	 */
	public function getSavLibraryMvcFieldConfigurationByView($fieldName, $viewIdentifier) {
    return $this->savLibraryMvcConfiguration['columns'][$fieldName]['config'][$viewIdentifier];
  }

	/**
	 * Gets the merged field configuration by view.
	 *
	 * @param string $fieldName
	 * @param integer $viewIdentifier
	 * @return array
	 */
	public function getMergedFieldConfigurationByView($fieldName, $viewIdentifier) {
    return array_merge(
      $this->getTCAFieldConfiguration($fieldName),
      $this->getSavLibraryMvcFieldConfigurationByView($fieldName, $viewIdentifier)
    );
  }

	/**
	 * Gets the field configuration for a view.
	 *
	 * @param string $fieldName
	 * @param integer $viewIdentifier
	 * @return array
	 */
	public function getFieldConfiguration($fieldName, $viewIdentifier) {
    // Gets the field configuration
		$fieldConfiguration = $this->getMergedFieldConfigurationByView($fieldName, $viewIdentifier);

    $this->fieldConfigurationManager->setFieldName($fieldName);
    $this->fieldConfigurationManager->setViewIdentifier($viewIdentifier);
    $this->fieldConfigurationManager->setFieldConfiguration($fieldConfiguration);

    if ($fieldConfiguration['selected']) {
      // Adds the label
      $fieldConfiguration['label'] = ($fieldConfiguration['label'] ? $fieldConfiguration['label'] : $this->getTCAFieldLabel($fieldName));

      // Adds the type
      $fieldConfiguration['type'] = $this->getType($fieldName);

      // Adds the name
      $fieldConfiguration['name'] = $fieldName;

      // Adds the folder
      $fieldConfiguration['folder'] = $this->getFolder($fieldName, $viewIdentifier);
      
      $fieldConfiguration = array_merge($fieldConfiguration, $this->fieldConfigurationManager->getSelectedFieldConfiguration());
    }
    return $fieldConfiguration;
  }

  /**
	 * Gets the configuration for all the fields.
	 *
	 * @param integer $viewIdentifier
	 * @param Tx_Extbase_DomainObject_AbstractEntity $object
	 * @return array
	 */
	public function getFieldsConfiguration($viewIdentifier, $object) {
    $this->fieldConfigurationManager->setObject($object);
    $sortedSavLibraryMvcColumns = $this->sortFieldsConfiguration($viewIdentifier);
		foreach($sortedSavLibraryMvcColumns as $fieldKey => $field) {
      $fieldsConfiguration[$fieldKey] = $this->getFieldConfiguration($fieldKey, $viewIdentifier);
    }
		return $fieldsConfiguration;
	}

  /**
	 * Sorts all the fields.
	 *
	 * @param integer $viewIdentifier
	 * @return array
	 */
	public function sortFieldsConfiguration($viewIdentifier) {
		$savLibraryMvcColumns = $this->getSavLibraryMvcColumns();
		foreach($savLibraryMvcColumns as $fieldKey => $field) {
      $temporaryArray[$fieldKey] = $field['order'][$viewIdentifier];
    }
		asort($temporaryArray);
		foreach($temporaryArray as $fieldKey => $field) {
      $sortedSavLibraryMvcColumns[$fieldKey] = $savLibraryMvcColumns[$fieldKey];
    }
		return $sortedSavLibraryMvcColumns;
	}

}
